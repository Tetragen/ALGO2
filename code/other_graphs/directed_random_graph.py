"""
Generating a random directed graph
"""

import numpy as np
import random
from graphviz import Digraph
dot = Digraph(comment='Random directed graph generated by python')

# number of nodes
n = 18
# number of edges
p = 30

# in a directed graph, the possible number of edges is different !
if p > n * (n - 1):
    raise ValueError('The number of edges is too large !')

# this time we need the opposite of an edge
all_edges = [{i, j} for i in range(1, n + 1) for j in range(1, n + 1)]
# remove edges from one node to itself
all_edges = [edge for edge in all_edges if len(edge) == 2]
# shuffle the order of the edges
random.shuffle(all_edges)

# double check that we did not make an error while creating our set of edges
if len(all_edges) == n * (n - 1):
    print(f"il y a bien n(n-1)= {(n * (n - 1))} arÃªtes possibles")

# choose the colors you like here :
# http://www.graphviz.org/doc/info/colors.html
colors = ['black', 'aquamarine4', 'goldenrod3', 'darkorchid4']

# create the nodes : actually this is optional !
# we could comment all this block : the nodes would still be
# created with only the edges
# however, we this method we can easily
# assign different parameters (color, width)
# to our nodes
for i in range(1, n + 1):
    # choice of the color from the above list
    some_color = colors[random.randint(1, len(colors) - 1)]
    # width of the drawing
    some_width = str(random.uniform(1, 2))
    dot.node(str(i),
             color=some_color,
             penwidth=some_width)

# take edges in the shuffled list of edges
for j in range(p - 1):
    random_edge = all_edges.pop()
    node_a = str(random_edge.pop())
    node_b = str(random_edge.pop())
    some_color = colors[random.randint(1, len(colors) - 1)]
    some_width = str(random.uniform(1, 2))
    dot.edge(node_a,
             node_b,
             color=some_color,
             penwidth=some_width)

# visualize the graph
graph_name = f"images/directed_rand_{n}_vx_{p}_edgs"
dot.render(graph_name)
